# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actionmailbox` gem.
# Please instead update this file by running `bin/tapioca gem actionmailbox`.

# source://actionmailbox//lib/action_mailbox.rb#5
module ActionMailbox
  extend ::ActiveSupport::Autoload

  # source://actionmailbox//lib/action_mailbox.rb#14
  def incinerate; end

  # source://actionmailbox//lib/action_mailbox.rb#14
  def incinerate=(val); end

  # source://actionmailbox//lib/action_mailbox.rb#15
  def incinerate_after; end

  # source://actionmailbox//lib/action_mailbox.rb#15
  def incinerate_after=(val); end

  # source://actionmailbox//lib/action_mailbox.rb#12
  def ingress; end

  # source://actionmailbox//lib/action_mailbox.rb#12
  def ingress=(val); end

  # source://actionmailbox//lib/action_mailbox.rb#13
  def logger; end

  # source://actionmailbox//lib/action_mailbox.rb#13
  def logger=(val); end

  # source://actionmailbox//lib/action_mailbox.rb#16
  def queues; end

  # source://actionmailbox//lib/action_mailbox.rb#16
  def queues=(val); end

  # source://actionmailbox//lib/action_mailbox.rb#17
  def storage_service; end

  # source://actionmailbox//lib/action_mailbox.rb#17
  def storage_service=(val); end

  class << self
    # source://actionmailbox//lib/action_mailbox.rb#14
    def incinerate; end

    # source://actionmailbox//lib/action_mailbox.rb#14
    def incinerate=(val); end

    # source://actionmailbox//lib/action_mailbox.rb#15
    def incinerate_after; end

    # source://actionmailbox//lib/action_mailbox.rb#15
    def incinerate_after=(val); end

    # source://actionmailbox//lib/action_mailbox.rb#12
    def ingress; end

    # source://actionmailbox//lib/action_mailbox.rb#12
    def ingress=(val); end

    # source://actionmailbox//lib/action_mailbox.rb#13
    def logger; end

    # source://actionmailbox//lib/action_mailbox.rb#13
    def logger=(val); end

    # source://actionmailbox//lib/action_mailbox.rb#16
    def queues; end

    # source://actionmailbox//lib/action_mailbox.rb#16
    def queues=(val); end

    def railtie_helpers_paths; end
    def railtie_namespace; end
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://actionmailbox//lib/action_mailbox.rb#17
    def storage_service; end

    # source://actionmailbox//lib/action_mailbox.rb#17
    def storage_service=(val); end

    def table_name_prefix; end
    def use_relative_model_naming?; end
  end
end

# The base class for all application mailboxes. Not intended to be inherited from directly. Inherit from
# +ApplicationMailbox+ instead, as that's where the app-specific routing is configured. This routing
# is specified in the following ways:
#
#   class ApplicationMailbox < ActionMailbox::Base
#     # Any of the recipients of the mail (whether to, cc, bcc) are matched against the regexp.
#     routing /^replies@/i => :replies
#
#     # Any of the recipients of the mail (whether to, cc, bcc) needs to be an exact match for the string.
#     routing "help@example.com" => :help
#
#     # Any callable (proc, lambda, etc) object is passed the inbound_email record and is a match if true.
#     routing ->(inbound_email) { inbound_email.mail.to.size > 2 } => :multiple_recipients
#
#     # Any object responding to #match? is called with the inbound_email record as an argument. Match if true.
#     routing CustomAddress.new => :custom
#
#     # Any inbound_email that has not been already matched will be sent to the BackstopMailbox.
#     routing :all => :backstop
#   end
#
# Application mailboxes need to override the #process method, which is invoked by the framework after
# callbacks have been run. The callbacks available are: +before_processing+, +after_processing+, and
# +around_processing+. The primary use case is ensure certain preconditions to processing are fulfilled
# using +before_processing+ callbacks.
#
# If a precondition fails to be met, you can halt the processing using the +#bounced!+ method,
# which will silently prevent any further processing, but not actually send out any bounce notice. You
# can also pair this behavior with the invocation of an Action Mailer class responsible for sending out
# an actual bounce email. This is done using the #bounce_with method, which takes the mail object returned
# by an Action Mailer method, like so:
#
#   class ForwardsMailbox < ApplicationMailbox
#     before_processing :ensure_sender_is_a_user
#
#     private
#       def ensure_sender_is_a_user
#         unless User.exist?(email_address: mail.from)
#           bounce_with UserRequiredMailer.missing(inbound_email)
#         end
#       end
#   end
#
# During the processing of the inbound email, the status will be tracked. Before processing begins,
# the email will normally have the +pending+ status. Once processing begins, just before callbacks
# and the #process method is called, the status is changed to +processing+. If processing is allowed to
# complete, the status is changed to +delivered+. If a bounce is triggered, then +bounced+. If an unhandled
# exception is bubbled up, then +failed+.
#
# Exceptions can be handled at the class level using the familiar +Rescuable+ approach:
#
#   class ForwardsMailbox < ApplicationMailbox
#     rescue_from(ApplicationSpecificVerificationError) { bounced! }
#   end
#
# source://actionmailbox//lib/action_mailbox/base.rb#63
class ActionMailbox::Base
  include ::ActiveSupport::Rescuable
  include ::ActionMailbox::Routing
  include ::ActiveSupport::Callbacks
  include ::ActionMailbox::Callbacks
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActionMailbox::Routing::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActionMailbox::Callbacks::ClassMethods

  # @return [Base] a new instance of Base
  #
  # source://actionmailbox//lib/action_mailbox/base.rb#76
  def initialize(inbound_email); end

  def __callbacks; end
  def __callbacks?; end
  def _process_callbacks; end
  def _run_process_callbacks(&block); end

  # Enqueues the given +message+ for delivery and changes the inbound email's status to +:bounced+.
  #
  # source://actionmailbox//lib/action_mailbox/base.rb#101
  def bounce_with(message); end

  # source://actionmailbox//lib/action_mailbox/base.rb#68
  def bounced!(*_arg0, &_arg1); end

  # source://actionmailbox//lib/action_mailbox/base.rb#68
  def delivered!(*_arg0, &_arg1); end

  # @return [Boolean]
  #
  # source://actionmailbox//lib/action_mailbox/base.rb#95
  def finished_processing?; end

  # Returns the value of attribute inbound_email.
  #
  # source://actionmailbox//lib/action_mailbox/base.rb#67
  def inbound_email; end

  # source://actionmailbox//lib/action_mailbox/base.rb#70
  def logger(*_arg0, &_arg1); end

  # source://actionmailbox//lib/action_mailbox/base.rb#68
  def mail(*_arg0, &_arg1); end

  # source://actionmailbox//lib/action_mailbox/base.rb#80
  def perform_processing; end

  # source://actionmailbox//lib/action_mailbox/base.rb#91
  def process; end

  def rescue_handlers; end
  def rescue_handlers=(_arg0); end
  def rescue_handlers?; end

  # source://actionmailbox//lib/action_mailbox/routing.rb#9
  def router; end

  # source://actionmailbox//lib/action_mailbox/routing.rb#9
  def router=(val); end

  private

  # source://actionmailbox//lib/action_mailbox/base.rb#107
  def track_status_of_inbound_email; end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _process_callbacks; end
    def _process_callbacks=(value); end

    # source://actionmailbox//lib/action_mailbox/base.rb#72
    def receive(inbound_email); end

    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end

    # source://actionmailbox//lib/action_mailbox/routing.rb#9
    def router; end

    # source://actionmailbox//lib/action_mailbox/routing.rb#9
    def router=(val); end
  end
end

# source://actionmailbox//app/controllers/action_mailbox/base_controller.rb#5
class ActionMailbox::BaseController < ::ActionController::Base
  private

  def _layout(lookup_context, formats); end

  # source://actionmailbox//app/controllers/action_mailbox/base_controller.rb#22
  def authenticate_by_password; end

  # source://actionmailbox//app/controllers/action_mailbox/base_controller.rb#11
  def ensure_configured; end

  # source://actionmailbox//app/controllers/action_mailbox/base_controller.rb#17
  def ingress_name; end

  # source://actionmailbox//app/controllers/action_mailbox/base_controller.rb#30
  def password; end

  class << self
    def __callbacks; end
    def middleware_stack; end
  end
end

# Defines the callbacks related to processing.
#
# source://actionmailbox//lib/action_mailbox/callbacks.rb#7
module ActionMailbox::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActionMailbox::Callbacks::ClassMethods

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://actionmailbox//lib/action_mailbox/callbacks.rb#0
module ActionMailbox::Callbacks::ClassMethods
  # source://actionmailbox//lib/action_mailbox/callbacks.rb#25
  def after_processing(*methods, &block); end

  # source://actionmailbox//lib/action_mailbox/callbacks.rb#29
  def around_processing(*methods, &block); end

  # source://actionmailbox//lib/action_mailbox/callbacks.rb#21
  def before_processing(*methods, &block); end
end

# source://actionmailbox//lib/action_mailbox/callbacks.rb#11
ActionMailbox::Callbacks::TERMINATOR = T.let(T.unsafe(nil), Proc)

# source://actionmailbox//lib/action_mailbox/engine.rb#12
class ActionMailbox::Engine < ::Rails::Engine; end

# source://actionmailbox//app/models/action_mailbox/inbound_email.rb#27
class ActionMailbox::InboundEmail < ::ActionMailbox::Record
  include ::ActionMailbox::InboundEmail::GeneratedAttributeMethods
  include ::ActionMailbox::InboundEmail::GeneratedAssociationMethods

  class << self
    def _validators; end
    def defined_enums; end
  end
end

# source://actionmailbox//app/models/action_mailbox/inbound_email.rb#0
module ActionMailbox::InboundEmail::GeneratedAssociationMethods; end

# source://actionmailbox//app/models/action_mailbox/inbound_email.rb#0
module ActionMailbox::InboundEmail::GeneratedAttributeMethods; end

# source://actionmailbox//app/models/action_mailbox/inbound_email/incineratable.rb#6
module ActionMailbox::InboundEmail::Incineratable
  extend ::ActiveSupport::Concern

  # source://actionmailbox//app/models/action_mailbox/inbound_email/incineratable.rb#17
  def incinerate; end

  # source://actionmailbox//app/models/action_mailbox/inbound_email/incineratable.rb#13
  def incinerate_later; end
end

# source://actionmailbox//app/models/action_mailbox/inbound_email/incineratable/incineration.rb#8
class ActionMailbox::InboundEmail::Incineratable::Incineration
  # source://actionmailbox//app/models/action_mailbox/inbound_email/incineratable/incineration.rb#9
  def initialize(inbound_email); end

  # source://actionmailbox//app/models/action_mailbox/inbound_email/incineratable/incineration.rb#13
  def run; end

  private

  # source://actionmailbox//app/models/action_mailbox/inbound_email/incineratable/incineration.rb#18
  def due?; end

  # source://actionmailbox//app/models/action_mailbox/inbound_email/incineratable/incineration.rb#22
  def processed?; end
end

# source://actionmailbox//app/models/action_mailbox/inbound_email/message_id.rb#9
module ActionMailbox::InboundEmail::MessageId
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionMailbox::InboundEmail::MessageId::ClassMethods
end

# source://actionmailbox//app/models/action_mailbox/inbound_email/message_id.rb#0
module ActionMailbox::InboundEmail::MessageId::ClassMethods
  # source://actionmailbox//app/models/action_mailbox/inbound_email/message_id.rb#16
  def create_and_extract_message_id!(source, **options); end

  private

  # source://actionmailbox//app/models/action_mailbox/inbound_email/message_id.rb#37
  def create_and_upload_raw_email!(source); end

  # source://actionmailbox//app/models/action_mailbox/inbound_email/message_id.rb#27
  def extract_message_id(source); end

  # source://actionmailbox//app/models/action_mailbox/inbound_email/message_id.rb#31
  def generate_missing_message_id(message_checksum); end
end

# source://actionmailbox//app/models/action_mailbox/inbound_email/routable.rb#8
module ActionMailbox::InboundEmail::Routable
  extend ::ActiveSupport::Concern

  # source://actionmailbox//app/models/action_mailbox/inbound_email/routable.rb#21
  def route; end

  # source://actionmailbox//app/models/action_mailbox/inbound_email/routable.rb#16
  def route_later; end
end

# source://actionmailbox//app/jobs/action_mailbox/incineration_job.rb#12
class ActionMailbox::IncinerationJob < ::ActiveJob::Base
  # source://actionmailbox//app/jobs/action_mailbox/incineration_job.rb#21
  def perform(inbound_email); end

  class << self
    def queue_name; end
    def rescue_handlers; end

    # source://actionmailbox//app/jobs/action_mailbox/incineration_job.rb#17
    def schedule(inbound_email); end
  end
end

# source://actionmailbox//app/models/action_mailbox/record.rb#4
class ActionMailbox::Record < ::ActiveRecord::Base
  include ::ActionMailbox::Record::GeneratedAttributeMethods
  include ::ActionMailbox::Record::GeneratedAssociationMethods

  class << self
    def _validators; end
    def defined_enums; end
  end
end

# source://actionmailbox//app/models/action_mailbox/record.rb#0
module ActionMailbox::Record::GeneratedAssociationMethods; end

# source://actionmailbox//app/models/action_mailbox/record.rb#0
module ActionMailbox::Record::GeneratedAttributeMethods; end

# Encapsulates the routes that live on the ApplicationMailbox and performs the actual routing when
# an inbound_email is received.
#
# source://actionmailbox//lib/action_mailbox/router.rb#6
class ActionMailbox::Router
  # @return [Router] a new instance of Router
  #
  # source://actionmailbox//lib/action_mailbox/router.rb#9
  def initialize; end

  # source://actionmailbox//lib/action_mailbox/router.rb#19
  def add_route(address, to:); end

  # source://actionmailbox//lib/action_mailbox/router.rb#13
  def add_routes(routes); end

  # source://actionmailbox//lib/action_mailbox/router.rb#33
  def mailbox_for(inbound_email); end

  # source://actionmailbox//lib/action_mailbox/router.rb#23
  def route(inbound_email); end

  private

  # Returns the value of attribute routes.
  #
  # source://actionmailbox//lib/action_mailbox/router.rb#38
  def routes; end
end

# Encapsulates a route, which can then be matched against an inbound_email and provide a lookup of the matching
# mailbox class. See examples for the different route addresses and how to use them in the ActionMailbox::Base
# documentation.
#
# source://actionmailbox//lib/action_mailbox/router/route.rb#7
class ActionMailbox::Router::Route
  # @return [Route] a new instance of Route
  #
  # source://actionmailbox//lib/action_mailbox/router/route.rb#10
  def initialize(address, to:); end

  # Returns the value of attribute address.
  #
  # source://actionmailbox//lib/action_mailbox/router/route.rb#8
  def address; end

  # source://actionmailbox//lib/action_mailbox/router/route.rb#31
  def mailbox_class; end

  # Returns the value of attribute mailbox_name.
  #
  # source://actionmailbox//lib/action_mailbox/router/route.rb#8
  def mailbox_name; end

  # @return [Boolean]
  #
  # source://actionmailbox//lib/action_mailbox/router/route.rb#16
  def match?(inbound_email); end

  private

  # source://actionmailbox//lib/action_mailbox/router/route.rb#36
  def ensure_valid_address; end
end

# source://actionmailbox//lib/action_mailbox/router.rb#7
class ActionMailbox::Router::RoutingError < ::StandardError; end

# See ActionMailbox::Base for how to specify routing.
#
# source://actionmailbox//lib/action_mailbox/routing.rb#5
module ActionMailbox::Routing
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionMailbox::Routing::ClassMethods
end

# source://actionmailbox//lib/action_mailbox/routing.rb#0
module ActionMailbox::Routing::ClassMethods
  # source://actionmailbox//lib/action_mailbox/routing.rb#21
  def mailbox_for(inbound_email); end

  # source://actionmailbox//lib/action_mailbox/routing.rb#17
  def route(inbound_email); end

  # source://actionmailbox//lib/action_mailbox/routing.rb#13
  def routing(routes); end
end

# source://actionmailbox//app/jobs/action_mailbox/routing_job.rb#6
class ActionMailbox::RoutingJob < ::ActiveJob::Base
  # source://actionmailbox//app/jobs/action_mailbox/routing_job.rb#9
  def perform(inbound_email); end

  class << self
    def queue_name; end
  end
end

# source://actionmailbox//lib/action_mailbox/test_case.rb#7
class ActionMailbox::TestCase < ::ActiveSupport::TestCase
  include ::ActionMailbox::TestHelper
end

# source://actionmailbox//lib/action_mailbox/test_helper.rb#6
module ActionMailbox::TestHelper
  # Create an InboundEmail record using an eml fixture in the format of message/rfc822
  # referenced with +fixture_name+ located in +test/fixtures/files/fixture_name+.
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#9
  def create_inbound_email_from_fixture(fixture_name, status: T.unsafe(nil)); end

  # Creates an InboundEmail by specifying through options or a block.
  #
  # ==== Options
  #
  # * <tt>:status</tt> - The +status+ to set for the created InboundEmail.
  #   For possible statuses, see its documentation.
  #
  # ==== Creating a simple email
  #
  # When you only need to set basic fields like +from+, +to+, +subject+, and
  # +body+, you can pass them directly as options.
  #
  #   create_inbound_email_from_mail(from: "david@loudthinking.com", subject: "Hello!")
  #
  # ==== Creating a multi-part email
  #
  # When you need to create a more intricate email, like a multi-part email
  # that contains both a plaintext version and an HTML version, you can pass a
  # block.
  #
  #   create_inbound_email_from_mail do
  #     to "David Heinemeier Hansson <david@loudthinking.com>"
  #     from "Bilbo Baggins <bilbo@bagend.com>"
  #     subject "Come down to the Shire!"
  #
  #     text_part do
  #       body "Please join us for a party at Bag End"
  #     end
  #
  #     html_part do
  #       body "<h1>Please join us for a party at Bag End</h1>"
  #     end
  #   end
  #
  # As with +Mail.new+, you can also use a block parameter to define the parts
  # of the message:
  #
  #   create_inbound_email_from_mail do |mail|
  #     mail.to "David Heinemeier Hansson <david@loudthinking.com>"
  #     mail.from "Bilbo Baggins <bilbo@bagend.com>"
  #     mail.subject "Come down to the Shire!"
  #
  #     mail.text_part do |part|
  #       part.body "Please join us for a party at Bag End"
  #     end
  #
  #     mail.html_part do |part|
  #       part.body "<h1>Please join us for a party at Bag End</h1>"
  #     end
  #   end
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#63
  def create_inbound_email_from_mail(status: T.unsafe(nil), **mail_options, &block); end

  # Create an InboundEmail using the raw rfc822 +source+ as text.
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#72
  def create_inbound_email_from_source(source, status: T.unsafe(nil)); end

  # Create an InboundEmail from fixture using the same arguments as create_inbound_email_from_fixture
  # and immediately route it to processing.
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#79
  def receive_inbound_email_from_fixture(*args); end

  # Create an InboundEmail using the same options or block as
  # create_inbound_email_from_mail, then immediately route it for processing.
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#85
  def receive_inbound_email_from_mail(**kwargs, &block); end

  # Create an InboundEmail using the same arguments as create_inbound_email_from_source and immediately route it
  # to processing.
  #
  # source://actionmailbox//lib/action_mailbox/test_helper.rb#91
  def receive_inbound_email_from_source(*args); end
end

# source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#3
module Mail
  class << self
    def all(*args, &block); end
    def connection(&block); end
    def defaults(&block); end
    def delete_all(*args, &block); end
    def deliver(*args, &block); end
    def delivery_method; end
    def eager_autoload!; end
    def find(*args, &block); end
    def find_and_delete(*args, &block); end
    def first(*args, &block); end

    # source://actionmailbox//lib/action_mailbox/mail_ext/from_source.rb#4
    def from_source(source); end

    def inform_interceptors(mail); end
    def inform_observers(mail); end
    def last(*args, &block); end
    def new(*args, &block); end
    def random_tag; end
    def read(filename); end
    def read_from_string(mail_as_string); end
    def register_autoload(name, path); end
    def register_interceptor(interceptor); end
    def register_observer(observer); end
    def retriever_method; end
    def something_random; end
    def uniq; end
    def unregister_interceptor(interceptor); end
    def unregister_observer(observer); end
  end
end

# source://actionmailbox//lib/action_mailbox/mail_ext/address_equality.rb#4
class Mail::Address
  include ::Mail::Constants

  def initialize(value = T.unsafe(nil)); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/address_equality.rb#5
  def ==(other_address); end

  def address(output_type = T.unsafe(nil)); end
  def address=(value); end
  def comments; end
  def decoded; end
  def display_name(output_type = T.unsafe(nil)); end
  def display_name=(str); end
  def domain(output_type = T.unsafe(nil)); end
  def encoded; end
  def format(output_type = T.unsafe(nil)); end
  def group; end
  def inspect; end
  def local(output_type = T.unsafe(nil)); end
  def name; end
  def raw; end
  def to_s; end

  private

  def format_comments; end
  def get_comments; end
  def get_display_name; end
  def get_domain; end
  def get_local; end
  def get_name; end
  def parse(value = T.unsafe(nil)); end
  def strip_all_comments(string); end
  def strip_domain_comments(value); end

  class << self
    # source://actionmailbox//lib/action_mailbox/mail_ext/address_wrapping.rb#5
    def wrap(address); end
  end
end

# source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#4
class Mail::Message
  def initialize(*args, &block); end

  def <=>(other); end
  def ==(other); end
  def [](name); end
  def []=(name, value); end
  def action; end
  def add_charset; end
  def add_content_transfer_encoding; end
  def add_content_type; end
  def add_date(date_val = T.unsafe(nil)); end
  def add_file(values); end
  def add_message_id(msg_id_val = T.unsafe(nil)); end
  def add_mime_version(ver_val = T.unsafe(nil)); end
  def add_part(part); end
  def add_transfer_encoding; end
  def all_parts; end
  def attachment; end
  def attachment?; end
  def attachments; end
  def bcc(val = T.unsafe(nil)); end
  def bcc=(val); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#21
  def bcc_addresses; end

  def bcc_addrs; end
  def body(value = T.unsafe(nil)); end
  def body=(value); end
  def body_encoding(value = T.unsafe(nil)); end
  def body_encoding=(value); end
  def bounced?; end
  def boundary; end
  def cc(val = T.unsafe(nil)); end
  def cc=(val); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#17
  def cc_addresses; end

  def cc_addrs; end
  def charset; end
  def charset=(value); end
  def comments(val = T.unsafe(nil)); end
  def comments=(val); end
  def content_description(val = T.unsafe(nil)); end
  def content_description=(val); end
  def content_disposition(val = T.unsafe(nil)); end
  def content_disposition=(val); end
  def content_id(val = T.unsafe(nil)); end
  def content_id=(val); end
  def content_location(val = T.unsafe(nil)); end
  def content_location=(val); end
  def content_transfer_encoding(val = T.unsafe(nil)); end
  def content_transfer_encoding=(val); end
  def content_type(val = T.unsafe(nil)); end
  def content_type=(val); end
  def content_type_parameters; end
  def convert_to_multipart; end
  def date(val = T.unsafe(nil)); end
  def date=(val); end
  def decode_body; end
  def decoded; end
  def default(sym, val = T.unsafe(nil)); end
  def deliver; end
  def deliver!; end
  def delivery_handler; end
  def delivery_handler=(_arg0); end
  def delivery_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end
  def delivery_status_part; end
  def delivery_status_report?; end
  def destinations; end
  def diagnostic_code; end
  def encode!; end
  def encoded; end
  def envelope_date; end
  def envelope_from; end
  def error_status; end
  def errors; end
  def filename; end
  def final_recipient; end
  def find_first_mime_type(mt); end
  def from(val = T.unsafe(nil)); end
  def from=(val); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#5
  def from_address; end

  def from_addrs; end
  def has_attachments?; end
  def has_charset?; end
  def has_content_transfer_encoding?; end
  def has_content_type?; end
  def has_date?; end
  def has_message_id?; end
  def has_mime_version?; end
  def has_transfer_encoding?; end
  def header(value = T.unsafe(nil)); end
  def header=(value); end
  def header_fields; end
  def headers(hash = T.unsafe(nil)); end
  def html_part(&block); end
  def html_part=(msg); end
  def in_reply_to(val = T.unsafe(nil)); end
  def in_reply_to=(val); end
  def inform_interceptors; end
  def inform_observers; end
  def inspect; end
  def is_marked_for_delete?; end
  def keywords(val = T.unsafe(nil)); end
  def keywords=(val); end
  def main_type; end
  def mark_for_delete=(value = T.unsafe(nil)); end
  def message_content_type; end
  def message_id(val = T.unsafe(nil)); end
  def message_id=(val); end
  def method_missing(name, *args, &block); end
  def mime_parameters; end
  def mime_type; end
  def mime_version(val = T.unsafe(nil)); end
  def mime_version=(val); end
  def multipart?; end
  def multipart_report?; end
  def part(params = T.unsafe(nil)); end
  def parts; end
  def perform_deliveries; end
  def perform_deliveries=(_arg0); end
  def raise_delivery_errors; end
  def raise_delivery_errors=(_arg0); end
  def raw_envelope; end
  def raw_source; end
  def read; end
  def ready_to_send!; end
  def received(val = T.unsafe(nil)); end
  def received=(val); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/recipients.rb#5
  def recipients; end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#9
  def recipients_addresses; end

  def references(val = T.unsafe(nil)); end
  def references=(val); end
  def register_for_delivery_notification(observer); end
  def remote_mta; end
  def reply(*args, &block); end
  def reply_to(val = T.unsafe(nil)); end
  def reply_to=(val); end
  def resent_bcc(val = T.unsafe(nil)); end
  def resent_bcc=(val); end
  def resent_cc(val = T.unsafe(nil)); end
  def resent_cc=(val); end
  def resent_date(val = T.unsafe(nil)); end
  def resent_date=(val); end
  def resent_from(val = T.unsafe(nil)); end
  def resent_from=(val); end
  def resent_message_id(val = T.unsafe(nil)); end
  def resent_message_id=(val); end
  def resent_sender(val = T.unsafe(nil)); end
  def resent_sender=(val); end
  def resent_to(val = T.unsafe(nil)); end
  def resent_to=(val); end
  def retryable?; end
  def return_path(val = T.unsafe(nil)); end
  def return_path=(val); end
  def sender(val = T.unsafe(nil)); end
  def sender=(val); end
  def set_envelope(val); end
  def skip_deletion; end
  def smtp_envelope_from(val = T.unsafe(nil)); end
  def smtp_envelope_from=(val); end
  def smtp_envelope_to(val = T.unsafe(nil)); end
  def smtp_envelope_to=(val); end
  def sub_type; end
  def subject(val = T.unsafe(nil)); end
  def subject=(val); end
  def text?; end
  def text_part(&block); end
  def text_part=(msg); end
  def to(val = T.unsafe(nil)); end
  def to=(val); end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#13
  def to_addresses; end

  def to_addrs; end
  def to_s; end
  def to_yaml(opts = T.unsafe(nil)); end
  def transfer_encoding; end
  def transport_encoding(val = T.unsafe(nil)); end
  def transport_encoding=(val); end
  def without_attachments!; end

  # source://actionmailbox//lib/action_mailbox/mail_ext/addresses.rb#25
  def x_original_to_addresses; end

  private

  def add_boundary; end
  def add_encoding_to_body; end
  def add_multipart_alternate_header; end
  def add_multipart_mixed_header; end
  def add_required_fields; end
  def add_required_message_fields; end
  def allowed_encodings; end
  def body_lazy(value); end
  def decode_body_as_text; end
  def do_delivery; end
  def find_attachment; end
  def identify_and_set_transfer_encoding; end
  def init_with_hash(hash); end
  def init_with_string(string); end
  def initialize_copy(original); end
  def parse_message; end
  def process_body_raw; end
  def raw_source=(value); end
  def separate_parts; end
  def set_envelope_header; end

  class << self
    def default_charset; end
    def default_charset=(charset); end
    def from_hash(hash); end
    def from_yaml(str); end
  end
end

Mail::Message::HEADER_SEPARATOR = T.let(T.unsafe(nil), Regexp)
Mail::RANDOM_TAG = T.let(T.unsafe(nil), String)
Mail::RubyVer = Mail::Ruby19

# source://actionmailbox//app/controllers/rails/conductor/action_mailbox/inbound_emails/sources_controller.rb#3
module Rails
  class << self
    def app_class; end
    def app_class=(_arg0); end
    def application; end
    def application=(_arg0); end
    def autoloaders; end
    def backtrace_cleaner; end
    def cache; end
    def cache=(_arg0); end
    def configuration; end
    def env; end
    def env=(environment); end
    def error; end
    def gem_version; end
    def groups(*groups); end
    def initialize!(*_arg0, &_arg1); end
    def initialized?(*_arg0, &_arg1); end
    def logger; end
    def logger=(_arg0); end
    def public_path; end
    def root; end
    def version; end
  end
end
